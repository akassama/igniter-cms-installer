<?php

namespace App\Database\Migrations;

use CodeIgniter\Database\Migration;

class Configurations extends Migration
{
    public function up()
    {
        $this->forge->addField([
            'config_id' => [
                'type' => 'VARCHAR',
                'constraint' => '255',
                'null' => false,
                'unique' => true,
            ],
            'config_for' => [
                'type' => 'VARCHAR',
                'constraint' => '100',
                'unique' => true,
            ],
            'description' => [
                'type' => 'TEXT',
                'constraint' => '1000',
                'null' => true,
                'default' => null,
            ],
            'config_value' => [
                'type' => 'TEXT',
                'null' => false,
            ],
            'icon' => [
                'type' => 'VARCHAR',
                'constraint' => '100',
                'null' => true,
                'default' => null,
            ],
            'group' => [
                'type' => 'VARCHAR',
                'constraint' => '100',
                'null' => true,
                'default' => null,
            ],
            'data_type' => [
                'type' => 'VARCHAR',
                'constraint' => '255',
                'null' => false,
                'default' => "Text",
            ],
            'options' => [
                'type' => 'VARCHAR',
                'constraint' => '255',
                'null' => true,
                'default' => null,
            ],
            'default_value' => [
                'type' => 'VARCHAR',
                'constraint' => '255',
                'null' => true,
                'default' => null,
            ],
            'custom_class' => [
                'type' => 'VARCHAR',
                'constraint' => '100',
                'null' => true,
                'default' => null,
            ],
            'search_terms' => [
                'type' => 'VARCHAR',
                'constraint' => '255',
                'null' => true,
                'default' => null,
            ],
            'deletable' => [
                'type' => 'INT',
                'default' => 1,
            ],
            'created_by' => [
                'type' => 'VARCHAR',
                'constraint' => 50,
            ],
            'updated_by' => [
                'type' => 'VARCHAR',
                'constraint' => 50,
                'null' => true,
            ],
            'created_at datetime default current_timestamp',
            'updated_at datetime default current_timestamp on update current_timestamp',
        ]);

        $this->forge->addKey('config_id', true);

        $this->forge->createTable('configurations');

        //Insert default record
        $data = [
            [
                'config_id' => getGUID(),
                'config_for' => 'SiteName',
                'config_value' => 'Igniter CMS App',
                'group' => 'site',
                'data_type' => 'Text',
                'options' => null,
                'default_value' => null,
                'deletable' => 0,
                'description' => 'Name of the company or organization.',
                'created_by' => getGUID(getDefaultAdminGUID()),
                'updated_by' => null,
                'custom_class' => 'title-text',
                'icon' => 'ri-building-line',
                'search_terms' => 'company,name,business,organization'
            ],
            [
                'config_id' => getGUID(),
                'config_for' => 'SiteDescription',
                'config_value' => 'CodeIgniter CMS | Powerful and Flexible Content Management',
                'group' => 'meta_seo',
                'data_type' => 'Text',
                'options' => null,
                'default_value' => null,
                'deletable' => 0,
                'description' => 'Main title for SEO and meta tags',
                'created_by' => getGUID(getDefaultAdminGUID()),
                'updated_by' => null,
                'custom_class' => '',
                'icon' => 'ri-heading',
                'search_terms' => 'meta,title,seo,page'
            ],
            [
                'config_id' => getGUID(),
                'config_for' => 'SiteKeywords',
                'config_value' => 'codeigniter, cms, content management system, php framework, web development',
                'group' => 'meta_seo',
                'data_type' => 'Text',
                'options' => null,
                'default_value' => null,
                'deletable' => 0,
                'description' => 'Keywords for SEO and meta tags',
                'created_by' => getGUID(getDefaultAdminGUID()),
                'updated_by' => null,
                'custom_class' => '',
                'icon' => 'ri-hashtag',
                'search_terms' => 'meta,keywords,seo,tags'
            ],
            [
                'config_id' => getGUID(),
                'config_for'    => 'SiteLogoLink',
                'config_value'    => 'public/uploads/files/ci-cms-logo.png',
                'group' => 'meta_seo',
                'data_type' => 'Text',
                'options' => null,
                'default_value' => null,
                'deletable'    => 0,
                'description' => 'Logo link for the frontend interface (PNG format).',
                'created_by' => getGUID(getDefaultAdminGUID()),
                'updated_by' => null,
                'custom_class' => '',
                'icon' => 'ri-image-2-line',
                'search_terms' => 'logo,site,branding,image'
            ],
            [
                'config_id' => getGUID(),
                'config_for' => 'SiteFaviconLink',
                'config_value' => 'public/uploads/files/favicon/favicon.ico',
                'group' => 'meta_seo',
                'data_type' => 'Text',
                'options' => null,
                'default_value' => null,
                'deletable' => 0,
                'description' => 'Favicon link for the frontend interface.',
                'created_by' => getGUID(getDefaultAdminGUID()),
                'updated_by' => null,
                'custom_class' => '',
                'icon' => 'ri-image-line',
                'search_terms' => 'favicon,site,icon,browser'
            ],
            [
                'config_id' => getGUID(),
                'config_for' => 'EnableRegistration',
                'config_value' => 'Yes',
                'group' => 'site',
                'data_type' => 'Select',
                'options' => 'Yes,No',
                'default_value' => 'Yes',
                'deletable' => 0,
                'description' => 'Enable or disable user registration/signup functionality.',
                'created_by' => getGUID(getDefaultAdminGUID()),
                'updated_by' => null,
                'custom_class' => '',
                'icon' => 'ri-settings-line',
                'search_terms' => 'registration,sign up,mode,status,settings'
            ],
            [
                'config_id' => getGUID(),
                'config_for'    => 'BackendLogoLink',
                'config_value'    => 'public/uploads/files/ci-cms-logo.png',
                'group' => 'meta_seo',
                'data_type' => 'Text',
                'options' => null,
                'default_value' => null,
                'deletable'    => 0,
                'description' => 'Logo link for the backend interface.',
                'created_by' => getGUID(getDefaultAdminGUID()),
                'updated_by' => null,
                'custom_class' => '',
                'icon' => 'ri-image-2-line',
                'search_terms' => 'logo,site,branding,image'
            ],
            [
                'config_id' => getGUID(),
                'config_for' => 'BackendFaviconLink',
                'config_value' => 'public/uploads/files/favicon/favicon.ico',
                'group' => 'meta_seo',
                'data_type' => 'Text',
                'options' => null,
                'default_value' => null,
                'deletable' => 0,
                'description' => 'Favicon link for the backend interface.',
                'created_by' => getGUID(getDefaultAdminGUID()),
                'updated_by' => null,
                'custom_class' => '',
                'icon' => 'ri-image-line',
                'search_terms' => 'favicon,site,icon,browser'
            ],
            [
                'config_id' => getGUID(),
                'config_for' => 'FrontEndFormat',
                'config_value' => 'MVC',
                'group' => 'api',
                'data_type' => 'Select',
                'options' => 'MVC,API',
                'default_value' => 'MVC',
                'deletable' => 0,
                'description' => 'Set frontend format to use MVC or API structure.',
                'created_by' => getGUID(getDefaultAdminGUID()),
                'updated_by' => null,
                'custom_class' => 'Set to use MVC or API for frontend.',
                'icon' => 'ri-layout-2-line',
                'search_terms' => 'frontend,format,mvc,api'
            ],
            [
                'config_id' => getGUID(),
                'config_for' => 'AllowedApiGetModels',
                'config_value' => 'BlogsModel, CategoriesModel, CodesModel, ContentBlocksModel, NavigationsModel, PagesModel, ThemesModel, UsersModel',
                'group' => 'api',
                'data_type' => 'Textarea',
                'options' => null,
                'default_value' => null,
                'deletable' => 0,
                'description' => 'List of models allowed for API GET requests.',
                'created_by' => getGUID(getDefaultAdminGUID()),
                'updated_by' => null,
                'custom_class' => '',
                'icon' => 'ri-database-2-line',
                'search_terms' => 'api,get,models,allowed'
            ],
            [
                'config_id' => getGUID(),
                'config_for' => 'EnableInstallationTracking',
                'config_value' => 'Yes',
                'group' => 'site',
                'data_type' => 'Select',
                'options' => 'Yes,No',
                'default_value' => 'Yes',
                'deletable' => 0,
                'description' => 'Enable or disable installation tracking. Only executed once if yes.',
                'created_by' => getGUID(getDefaultAdminGUID()),
                'updated_by' => null,
                'custom_class' => '',
                'icon' => 'ri-line-chart-fill',
                'search_terms' => 'tracking,installation,stat'
            ],
            [
                'config_id' => getGUID(),
                'config_for' => 'InstallationTracked',
                'config_value' => 'No',
                'group' => 'site',
                'data_type' => 'Select',
                'options' => 'Yes,No',
                'default_value' => 'No',
                'deletable' => 0,
                'description' => 'Checks if installation is tracked.',
                'created_by' => getGUID(getDefaultAdminGUID()),
                'updated_by' => null,
                'custom_class' => '',
                'icon' => 'ri-line-chart-fill',
                'search_terms' => 'tracking,installation,stat'
            ],
            [
                'config_id' => getGUID(),
                'config_for' => 'EnableGeminiAI',
                'config_value' => 'Yes',
                'group' => 'ai',
                'data_type' => 'Select',
                'options' => 'Yes,No',
                'default_value' => 'No',
                'deletable' => 0,
                'description' => 'Enable or disable Gemini AI integration.',
                'created_by' => getGUID(getDefaultAdminGUID()),
                'updated_by' => null,
                'custom_class' => '',
                'icon' => 'ri-robot-2-line',
                'search_terms' => 'ai,chat,help,gemini,deepseek,qwen,gpt,enable'
            ],
            [
                'config_id' => getGUID(),
                'config_for' => 'EnableGeminiAIAnalysis',
                'config_value' => 'Yes',
                'group' => 'ai',
                'data_type' => 'Select',
                'options' => 'Yes,No',
                'default_value' => 'No',
                'deletable' => 0,
                'description' => 'Enable or disable Gemini AI for analysis of site data. This may include sharing of sensitive data with the AI',
                'created_by' => getGUID(getDefaultAdminGUID()),
                'updated_by' => null,
                'custom_class' => '',
                'icon' => 'ri-robot-2-line',
                'search_terms' => 'ai,chat,help,gemini,deepseek,qwen,gpt,enable'
            ],
            [
                'config_id' => getGUID(),
                'config_for' => 'GeminiAPIKey',
                'config_value' => '',
                'group' => 'ai',
                'data_type' => 'Text',
                'options' => null,
                'default_value' => '',
                'deletable' => 0,
                'description' => 'API key for the AI service to use (e.g., Gemini).',
                'created_by' => getGUID(getDefaultAdminGUID()),
                'updated_by' => null,
                'custom_class' => '',
                'icon' => 'ri-robot-2-fill',
                'search_terms' => 'ai,chat,help,gemini,deepseek,qwen,gpt'
            ],
            [
                'config_id' => getGUID(),
                'config_for' => 'GeminiBaseURL',
                'config_value' => 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=',
                'group' => 'ai',
                'data_type' => 'Text',
                'options' => null,
                'default_value' => 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=',
                'deletable' => 0,
                'description' => 'Base URL for the API AI service to use (e.g., Gemini).',
                'created_by' => getGUID(getDefaultAdminGUID()),
                'updated_by' => null,
                'custom_class' => '',
                'icon' => 'ri-robot-2-fill',
                'search_terms' => 'ai,base url,chat,help,gemini,deepseek,qwen,gpt'
            ],
            [
                'config_id' => getGUID(),
                'config_for' => 'EnableGlobalSearchIcon',
                'config_value' => 'Yes',
                'group' => 'site',
                'data_type' => 'Select',
                'options' => 'Yes,No',
                'default_value' => 'Yes',
                'deletable' => 0,
                'description' => 'Enable or disable global search icon feature.',
                'created_by' => getGUID(getDefaultAdminGUID()),
                'updated_by' => null,
                'custom_class' => '',
                'icon' => 'ri-search-line',
                'search_terms' => 'search,global search,search modal'
            ],
            [
                'config_id' => getGUID(),
                'config_for' => 'HoneypotKey',
                'config_value' => 'igniter_hpot_val',
                'group' => 'security',
                'data_type' => 'Text',
                'options' => null,
                'default_value' => 'igniter_hpot_val',
                'deletable' => 0,
                'description' => 'This is the input name for your honeypot input.',
                'created_by' => getGUID(getDefaultAdminGUID()),
                'updated_by' => null,
                'custom_class' => '',
                'icon' => 'ri-shield-keyhole-fill',
                'search_terms' => 'honeypot,bot detection,spam,security, block ip'
            ],
            [
                'config_id' => getGUID(),
                'config_for' => 'TimestampKey',
                'config_value' => 'igniter_timestamp_val',
                'group' => 'security',
                'data_type' => 'Text',
                'options' => null,
                'default_value' => 'igniter_timestamp_val',
                'deletable' => 0,
                'description' => 'This is the input name for your timestamp bot detector.',
                'created_by' => getGUID(getDefaultAdminGUID()),
                'updated_by' => null,
                'custom_class' => '',
                'icon' => 'ri-shield-keyhole-fill',
                'search_terms' => 'honeypot,bot detection,spam,security, block ip'
            ],
            [
                'config_id' => getGUID(),
                'config_for' => 'MaxFailedAttempts',
                'config_value' => '5',
                'group' => 'security',
                'data_type' => 'Text',
                'options' => null,
                'default_value' => '5',
                'deletable' => 0,
                'description' => 'This is maximum failed login attempts allowed in one session.',
                'created_by' => getGUID(getDefaultAdminGUID()),
                'updated_by' => null,
                'custom_class' => '',
                'icon' => 'ri-lock-fill',
                'search_terms' => 'failed login,locked out,security'
            ],
            [
                'config_id' => getGUID(),
                'config_for' => 'FailedLoginsSuspensionPeriod',
                'config_value' => '+30 minutes',
                'group' => 'security',
                'data_type' => 'Select',
                'options' => '+5 minutes,+10 minutes,+30 minutes,+1 hour,+3 hours,+24 hours',
                'default_value' => '+30 minutes',
                'deletable' => 0,
                'description' => 'This is suspension period for multiple failed logins.',
                'created_by' => getGUID(getDefaultAdminGUID()),
                'updated_by' => null,
                'custom_class' => '',
                'icon' => 'ri-time-fill',
                'search_terms' => 'suspension,failed login,locked out,security, timeout'
            ],
            [
                'config_id' => getGUID(),
                'config_for' => 'BlockedIPSuspensionPeriod',
                'config_value' => '+3 years',
                'group' => 'security',
                'data_type' => 'Select',
                'options' => '+1 day,+1 days,+1 month,+3 months,+6 months,+1 year,+3 years,+5 years,+10 years',
                'default_value' => '+3 years',
                'deletable' => 0,
                'description' => 'This is suspension period for suspended IP\'s.',
                'created_by' => getGUID(getDefaultAdminGUID()),
                'updated_by' => null,
                'custom_class' => '',
                'icon' => 'ri-time-fill',
                'search_terms' => 'suspension,bot detection,spam,security, block ip'
            ],
            [
                'config_id' => getGUID(),
                'config_for' => 'MaxUploadFileSize',
                'config_value' => '1',
                'group' => 'site',
                'data_type' => 'Select',
                'options' => '1,3,5,10,50,100,1000',
                'default_value' => '5',
                'deletable' => 0,
                'description' => 'This is the maximum file upload size in megabytes.',
                'created_by' => getGUID(getDefaultAdminGUID()),
                'updated_by' => null,
                'custom_class' => '',
                'icon' => 'ri-upload-cloud-fill',
                'search_terms' => 'file upload,maximum,file size'
            ],
            [
                'config_id' => getGUID(),
                'config_for' => 'EnableIgniterNewsFeed',
                'config_value' => 'Yes',
                'group' => 'comment',
                'data_type' => 'Select',
                'options' => 'Yes,No',
                'default_value' => 'Yes',
                'deletable' => 0,
                'description' => 'Get latest news, features, and security update feeds from Igniter CMS.',
                'created_by' => getGUID(getDefaultAdminGUID()),
                'updated_by' => null,
                'custom_class' => '',
                'icon' => 'ri-newspaper-line',
                'search_terms' => 'igniter-cms,news feed,security updates'
            ],
        ];

        // Using Query Builder
        $this->db->table('configurations')->insertBatch($data);
    }

    public function down()
    {
        $this->forge->dropTable('configurations');
    }
}